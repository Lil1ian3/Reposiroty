package routines;
import java.text.*;
import java.util.Date;
import java.io.*;
import java.util.Calendar;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Utilities {

    /**
     * stripEncounter: Encounter_Nbr field in Report 55 contains 4 values separated by _.
     *                 Strip the last value and return only the first 3
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
    public static String stripEncounter(String string) {
    	
        /* get position of 4th _ */
    	int counter = 0;
    	int pos = 0;
        int i = -1;
        while ((i = string.indexOf("_", i + 1)) != -1) {
        	pos = i;
            counter++;        
        }
        if (counter == 3){
        	return string.substring(0, pos);
        }
        else{
        	
        	return string;
        }

       
    }
    
    /**
     * getMaxDate: Return max date in the past for DOS.
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String getMaxDate()
	{

		int yearsBack;
		Format formatter;
		String ret = "01-01-";

		Date date = new Date();

		formatter = new SimpleDateFormat("MMdd");
		if (Integer.parseInt(formatter.format(date)) < 201) /* 0201 or Feb 01*/
		{
			yearsBack = 2;
		}
		else
		{
			yearsBack = 1;
		}
		
		formatter = new SimpleDateFormat("yyyy");		
		ret = ret + Integer.toString((Integer.parseInt(formatter.format(date)) - yearsBack));
		
		return ret;
	}

    /**
     * extractValue: Return value after searching delimited Key/Value strings
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String extractValue(String inKeys, String inValues, String inKey)
	{

		String keys[];
		String values[];
		String outValue = "";
		
		keys = inKeys.split(";");
		values = inValues.split(";");
		
		for (int i = 0; i < inKeys.length(); i++)
		{
			if (keys[i].equals(inKey))
			{
				outValue = values[i];
				break;
			}				
		}		
		return outValue;
	}

    /**
     * extractBatchNbr: Return BatchNbr extracted from ASM input file
     *  for example, input file: TUF_CHARTAUDIT_20110913_589.csv                 
     *                   return: CHARTAUDIT_20110913_589 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String extractBatchNbr(String inFileName)
	{

		String outBatchNbr = "";
		int pos = 0;
		
		
		if (inFileName.length() > 5)
		{
			pos = inFileName.indexOf(".csv");
			if (pos > 5)
			{
				outBatchNbr = inFileName.substring(4,pos);
			}
		}
		return outBatchNbr;
	}

    /**
     * createSASAutoExecTiebackSierra: Creates Autoexec.sas file for Sierra Tieback process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecTiebackSierra(String dir, String trackerODBC, String overrideStartdt, String overrideEnddt)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;
		
		if (overrideStartdt.length() > 0 && overrideEnddt.length() > 0)
		{
			//validate override values
			SimpleDateFormat verFormat = new SimpleDateFormat("dd-MMM-yyyy");
		    Date testDate = null;
		    try
		    {
		      testDate = verFormat.parse(overrideStartdt);
		    }
		    catch (ParseException e)
		    {
		      retStatus = "Invalid overrideStartdt format";
		      return retStatus;
		    }

		    try
		    {
		      testDate = verFormat.parse(overrideEnddt);
		    }
		    catch (ParseException e)
		    {
		      retStatus = "Invalid overrideEnddt format";
		      return retStatus;
		    }

			
			//validation passed; set override values
			startdt = overrideStartdt + " 00:00:00";
			enddt = overrideEnddt + " 23:59:59";
		}
		else {
			//calc startdt/enddt for last week Sun-Sat			
			Calendar cal = Calendar.getInstance();

			cal.add(Calendar.DATE, -cal.get(Calendar.DAY_OF_WEEK) - 6);
		
			//set start to Sunday
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			startdt = sdf.format(cal.getTime()).toUpperCase() + " 00:00:00";
		
			//set end to Saturday
			cal.add(Calendar.DATE, 6);
			enddt = sdf.format(cal.getTime()).toUpperCase() + " 23:59:59";
		}
		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let startdt='" + startdt + "';");
            out.println("%let enddt='" + enddt + "';");
            out.println("%let trackerODBC=" + trackerODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}

	
    /**
     * createSASAutoExecTiebackTuf: Creates Autoexec.sas file for Tufts process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecTiebackTuf(String dir, String trackerODBC, String overrideStartdt, String overrideEnddt)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;

		if (overrideStartdt.length() > 0 && overrideEnddt.length() > 0)
		{
			//validate override values
			SimpleDateFormat verFormat = new SimpleDateFormat("dd-MMM-yyyy");
		    Date testDate = null;
		    try
		    {
		      testDate = verFormat.parse(overrideStartdt);
		    }
		    catch (ParseException e)
		    {
		      retStatus = "Invalid overrideStartdt format";
		      return retStatus;
		    }

		    try
		    {
		      testDate = verFormat.parse(overrideEnddt);
		    }
		    catch (ParseException e)
		    {
		      retStatus = "Invalid overrideEnddt format";
		      return retStatus;
		    }

			
			//validation passed; set override values
			startdt = overrideStartdt;
			enddt = overrideEnddt;
		}
		else {
		
			//calc startdt/enddt for last month			
			Calendar cal = Calendar.getInstance();
		
			cal.add(Calendar.DATE, -cal.get(Calendar.DAY_OF_MONTH));
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			enddt = sdf.format(cal.getTime()).toUpperCase();

			cal.add(Calendar.DATE, -cal.get(Calendar.DAY_OF_MONTH)+1);
			startdt = sdf.format(cal.getTime()).toUpperCase();
		}

		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let startdt='" + startdt + "';");
            out.println("%let enddt='" + enddt + "';");
            out.println("%let trackerODBC=" + trackerODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}

    /**
     * createSASAutoExecTiebackHnt: Creates Autoexec.sas file for HealthNet process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecTiebackHnt(String dir, String trackerODBC, String ratODBC, String overrideStartdt, String overrideEnddt)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;

		if (overrideStartdt.length() > 0 && overrideEnddt.length() > 0)
		{
			//validate override values
			SimpleDateFormat verFormat = new SimpleDateFormat("MM-dd-yyyy");
		    Date testDate = null;
		    try
		    {
		      testDate = verFormat.parse(overrideStartdt);
		    }
		    catch (ParseException e)
		    {
		      retStatus = "Invalid overrideStartdt format";
		      return retStatus;
		    }

		    try
		    {
		      testDate = verFormat.parse(overrideEnddt);
		    }
		    catch (ParseException e)
		    {
		      retStatus = "Invalid overrideEnddt format";
		      return retStatus;
		    }

			
			//validation passed; set override values
			startdt = overrideStartdt;
			enddt = overrideEnddt;
		}
		else {
		
			//calc startdt/enddt for last month			
			Calendar cal = Calendar.getInstance();
		
			cal.add(Calendar.DATE, -cal.get(Calendar.DAY_OF_MONTH));
			SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
			enddt = sdf.format(cal.getTime()).toUpperCase();

			cal.add(Calendar.DATE, -cal.get(Calendar.DAY_OF_MONTH)+1);
			startdt = sdf.format(cal.getTime()).toUpperCase();
		}

		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let startdt='" + startdt + "';");
            out.println("%let enddt='" + enddt + "';");
            out.println("%let ratODBC=" + ratODBC + ";");
            out.println("%let trackerODBC=" + trackerODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}

    /**
     * createSASAutoExecAttribution: Creates Autoexec.sas file for Attribution process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecAttribution(String dir)
	{
		String retStatus = "";
		boolean bDeleted = false;

		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
			DateFormat dateFormat = new SimpleDateFormat("MMddyyyy");
			Date date = new Date();
            out.println("%let date='" + dateFormat.format(date) + "';");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}

    /**
     * createSASAutoExecOMRD100: Creates Autoexec.sas file for OMR D100 process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecOMRD100(String dir, String sqlODBC)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;
		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let D100_ODBC=" + sqlODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}

	/**
     * createSASAutoExecOMREnd_To_End: Creates Autoexec.sas file for OMR End_To_End process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecOMREnd_To_End(String dir, String sqlODBC)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;
		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let End_To_End_ODBC=" + sqlODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}
	
	   /**
     * createSASAutoExecOMRAuditRecon: Creates Autoexec.sas file for OMR Audit_Recon process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecOMRAuditRecon(String dir, String sqlODBC)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;
		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let Audit_Recon_ODBC=" + sqlODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}	
	
    /**
     * createSASAutoExecOMRError_Exclusion: Creates Autoexec.sas file for OMR Error_Exclusion process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecOMRError_Exclusion(String dir, String sqlODBC)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;
		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let Error_Exclusion_ODBC=" + sqlODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}
	
    /**
     * createSASAutoExecOMRRestated: Creates Autoexec.sas file for OMR Restated Membership process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecOMRRestated(String dir, String sqlODBC)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;
		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let Restated_ODBC=" + sqlODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}

	/**

    /**
     * createSASAutoExecOMRCumulative: Creates Autoexec.sas file for OMR CMS Cumulative process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecOMRCumulative(String dir, String sqlODBC)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;
		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let Cumulative_ODBC=" + sqlODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}
	
    /**
     * createSASAutoExecOMRMonthly: Creates Autoexec.sas file for OMR Monthly process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecOMRMonthly(String dir, String sqlODBC)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;
		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let OMR_Monthly_ODBC=" + sqlODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}

	/**

    /**
     * createSASAutoExecOMRQuarterly_Dx: Creates Autoexec.sas file for OMR Quarterly Dx process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecOMRQuarterly_Dx(String dir, String sqlODBC)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;
		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let Quarterly_Dx_ODBC=" + sqlODBC + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}
	
	
	/**
	
    /**
     * createSASAutoExecPopulateProdDate: Creates Autoexec.sas file for Populate Prod_Date process
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String createSASAutoExecPopulateProdDate(String dir, String ASMdsn)
	{
		String retStatus = "";
		boolean bDeleted = false;
		boolean bCreated = false;
		String startdt;
		String enddt;

		
		//delete existing file
		try {
		File file = new File(dir + "autoexec.sas");
		bDeleted = file.delete();
		} catch (Exception e) {
		    retStatus = e.getMessage();			
		}

		//create file
		try {
			PrintWriter out = new PrintWriter(new FileWriter(dir + "autoexec.sas"));
            // Write text to file
            out.println("%let ASMdsn=" + ASMdsn + ";");
            out.close();
		} catch (Exception e){
		    retStatus = e.getMessage();
		}
		
		return retStatus;
	}

	
    /**
     * getLastMonthDateRange: Returns pipe delimited date range of last month for current day
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String getLastMonthDateRange()
	{
		String retRange = "|";
		String startdt;
		String enddt;

		
		//calc startdt/enddt for last month			
		Calendar cal = Calendar.getInstance();
		
		cal.add(Calendar.DATE, -cal.get(Calendar.DAY_OF_MONTH));
		SimpleDateFormat sdf = new SimpleDateFormat("M/d/yyyy");
		enddt = sdf.format(cal.getTime()).toUpperCase();

		cal.add(Calendar.DATE, -cal.get(Calendar.DAY_OF_MONTH)+1);
		startdt = sdf.format(cal.getTime()).toUpperCase();

		retRange = startdt + "|" + enddt;
		
		return retRange;
	}

    /**
     * getLastMonthDateRangeFromYesterday: Returns pipe delimited date range of last month from yesterday
     *                 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     */
	public static String getLastMonthDateRangeFromYesterday()
	{
		String retRange = "|";
		String startdt;
		String enddt;

		
		//calc startdt/enddt for last month			
		Calendar cal = Calendar.getInstance();
		
		cal.add(Calendar.DATE, -1);
		SimpleDateFormat sdf = new SimpleDateFormat("M/d/yyyy");
		enddt = sdf.format(cal.getTime()).toUpperCase();

		cal.add(Calendar.DATE, -30);
		startdt = sdf.format(cal.getTime()).toUpperCase();

		retRange = startdt + "|" + enddt;
		
		return retRange;
	}

    /**
     * getDashboardExpectedFiles: Returns expected files for a Trading Partner for a given day
     *                 
     * 
     * {talendTypes} int
     * 
     * {Category} User Defined
     * 
     */
	public static int getDashboardExpectedFiles(String reportDate, String frequency, int filesPerDelivery, String deliverySchedule)
	{
		int retFileCount = 0;
		int firstOfMonth = 0;
		int dayOfWeek = 0;
		int nbrOfWeeks = 0;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		Date dateFormat;
		Calendar cal = Calendar.getInstance();
		
		//calculate expected files
		if (frequency.equals("none"))
		{
			//no calc
		}
		else if (frequency.equals("daily"))
		{
			//set first day of month
			firstOfMonth = Integer.parseInt(reportDate.substring(0,6) + "01");
			for (int i=firstOfMonth; i<=Integer.parseInt(reportDate); i++)
			{
				if (deliverySchedule.equals("mon-fri"))
				{
					try {
						dateFormat = (Date)sdf.parse(String.valueOf(i));
						
						cal.setTime(dateFormat);
						if (cal.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY && cal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY)
						{
							retFileCount = retFileCount + filesPerDelivery;
							
						}
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
				else if (deliverySchedule.equals("mon-sat"))
				{
					try {
						dateFormat = (Date)sdf.parse(String.valueOf(i));
						
						cal.setTime(dateFormat);
						if (cal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY)
						{
							retFileCount = retFileCount + filesPerDelivery;
							
						}
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
				else if (deliverySchedule.equals("mon-sun"))
				{
					retFileCount = retFileCount + filesPerDelivery;
				}
			}			
		}
		else if (frequency.equals("weekly"))
		{
			//set day of week
			if (deliverySchedule.equals("sunday"))
			{
				dayOfWeek = Calendar.SUNDAY;
			}
			else if (deliverySchedule.equals("monday"))
			{
				dayOfWeek = Calendar.MONDAY;
			}
			else if (deliverySchedule.equals("tuesday"))
			{
				dayOfWeek = Calendar.TUESDAY;
			}
			else if (deliverySchedule.equals("wednesday"))
			{
				dayOfWeek = Calendar.WEDNESDAY;
			}
			else if (deliverySchedule.equals("thursday"))
			{
				dayOfWeek = Calendar.THURSDAY;
			}
			else if (deliverySchedule.equals("friday"))
			{
				dayOfWeek = Calendar.FRIDAY;
			}
			else if (deliverySchedule.equals("saturday"))
			{
				dayOfWeek = Calendar.SATURDAY;
			}
			//set first day of month
			firstOfMonth = Integer.parseInt(reportDate.substring(0,6) + "01");
			for (int i=firstOfMonth; i<=Integer.parseInt(reportDate); i++)
			{
				try {
					dateFormat = (Date)sdf.parse(String.valueOf(i));
					
					cal.setTime(dateFormat);
					if (cal.get(Calendar.DAY_OF_WEEK) == dayOfWeek)
					{
						nbrOfWeeks++;					
					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
					
			}			
			
			retFileCount = nbrOfWeeks * filesPerDelivery;
			
		}
		else if (frequency.equals("monthly"))
		{
			//set first day of month
			firstOfMonth = Integer.parseInt(reportDate.substring(0,6) + "01");
			for (int i=firstOfMonth; i<=Integer.parseInt(reportDate); i++)
			{
				try {
					dateFormat = (Date)sdf.parse(String.valueOf(i));
					
					cal.setTime(dateFormat);
					if (cal.get(Calendar.DAY_OF_MONTH) == Integer.parseInt(deliverySchedule))
					{
						retFileCount = filesPerDelivery;
						break;
					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
					
			}			
			
		}
		else
		{
			//shouldn't happen
		}
		
		return retFileCount;
	}


}
